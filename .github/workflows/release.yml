name: Build release

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Release Tag'
        required: true
      productionRelease:
        type: boolean
        description: Mark release as production ready
jobs:
  release-ubuntu:
    name: Build for Linux
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      BUILD_TARGET: x86_64-unknown-linux-musl
      BINARY_NAME: fpm
    steps:
      - uses: actions/checkout@main
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ftd/target
            fifthtry_content/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build-musl
        uses: gmiam/rust-musl-action@9e6a37bf27ecfffb6b92240ea276bea5487fa15d
        continue-on-error: false
        with:
          args: cargo build --target $BUILD_TARGET --release
      - uses: actions/upload-artifact@v2
        with:
          name: linux_musl_x86_64
          path: target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}*
      - name: Build-debian
        uses: gmiam/rust-musl-action@9e6a37bf27ecfffb6b92240ea276bea5487fa15d
        continue-on-error: false
        with:
          args: cargo install cargo-deb && cargo deb
      - uses: actions/upload-artifact@v2
        with:
          name: fpm_debian
          path: target/release/${{ env.BINARY_NAME }}*
      - name: Build-musl
        uses: gmiam/rust-musl-action@9e6a37bf27ecfffb6b92240ea276bea5487fa15d
        continue-on-error: false
        with:
          args: cargo build --target $BUILD_TARGET --release --features controller
      - uses: actions/upload-artifact@v2
        with:
          name: fpm_controller_linux_musl_x86_64
          path: target/x86_64-unknown-linux-musl/release/${{ env.BINARY_NAME }}*
  release-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions-rs/toolchain@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ftd/target
            fifthtry_content/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run Build
        id: build-windows
        continue-on-error: false
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - uses: actions/upload-artifact@master
        with:
          name: windows_x64_latest
          path: |
            target/release/fpm.exe
  release-macos:
    name: Build for MacOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@main
      - uses: actions-rs/toolchain@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ftd/target
            fifthtry_content/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run Build
        id: build-macos
        continue-on-error: false
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - uses: actions/upload-artifact@master
        with:
          name: macos_x64_latest
          path: |
            target/release/fpm
  create-release:
    name: Create github tag and release
    runs-on: ubuntu-latest
    needs: [release-ubuntu, release-macos, release-windows]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: macos_x64_latest
          path: ~/download/macos
      - uses: actions/download-artifact@v2
        with:
          name: linux_musl_x86_64
          path: ~/download/linux_musl
      - uses: actions/download-artifact@v2
        with:
          name: fpm_debian
          path: ~/download/linux_musl
      - uses: actions/download-artifact@v2
        with:
          name: fpm_controller_linux_musl_x86_64
          path: ~/download/fpm_controller_linux_musl
      - uses: actions/download-artifact@v2
        with:
          name: windows_x64_latest
          path: ~/download/windows
      - name: Rename assets
        run: |
          mv ~/download/windows/fpm.exe ~/download/windows/fpm_windows_x86_64.exe
          mv ~/download/macos/fpm ~/download/macos/fpm_macos_x86_64
          mv ~/download/linux_musl/fpm ~/download/linux_musl/fpm_linux_musl_x86_64
          mv ~/download/linux_musl/fpm ~/download/linux_musl/fpm_deb
          mv ~/download/linux_musl/fpm.d ~/download/linux_musl/fpm_linux_musl_x86_64.d
          mv ~/download/fpm_controller_linux_musl/fpm ~/download/fpm_controller_linux_musl/fpm_controller_linux_musl_x86_64
          mv ~/download/fpm_controller_linux_musl/fpm.d ~/download/fpm_controller_linux_musl/fpm_controller_linux_musl_x86_64.d
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "~/download/windows/fpm_windows_x86_64.exe,~/download/macos/fpm_macos_x86_64,~/download/linux_musl/fpm_linux_musl_x86_64,~/download/linux_musl/fpm_deb,~/download/linux_musl/fpm_linux_musl_x86_64.d,~/download/fpm_controller_linux_musl/fpm_controller_linux_musl_x86_64,~/download/fpm_controller_linux_musl/fpm_controller_linux_musl_x86_64.d"
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.event.inputs.releaseTag }}
          prerelease: ${{ github.event.inputs.productionRelease && github.event.inputs.productionRelease == 'false' }}
